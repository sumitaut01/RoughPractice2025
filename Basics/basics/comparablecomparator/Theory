Let's dive into Comparable vs Comparator in Java — two powerful interfaces for custom sorting.

🆚 Comparable vs Comparator
Feature	Comparable<T>	Comparator<T>
Package	java.lang	java.util
Purpose	Natural/default ordering	Custom/multiple sorting logic
Method	int compareTo(T o)	int compare(T o1, T o2)
Where it's used	Inside the class being sorted	Outside — as separate class/lambda
Affects Collections?	Used by Collections.sort()	Passed to Collections.sort(list, comp)
Supports multiple orders	❌ Only one	✅ Many


Basic Difference: Comparable vs Comparator
✅ Comparable<T> — Used for one natural sort order
Defines one sorting rule inside the class.

You override compareTo() and that's all it knows.

public class Student implements Comparable<Student> {
    public int age;
    public String name;

    public int compareTo(Student o) {
        return this.age - o.age; // natural sort by age only
    }
}
📌 Limitation: You can’t sort by name, salary, etc. unless you rewrite compareTo.



Comparator<T> — Used for custom, multiple sort orders
External logic to define sorting outside the class.

You can write many Comparators for the same class.
// Sort by name
Comparator<Student> byName = (s1, s2) -> s1.name.compareTo(s2.name);

// Sort by age descending
Comparator<Student> byAgeDesc = (s1, s2) -> s2.age - s1.age;
Usage:
Collections.sort(studentList, byName);



Summary Table
Feature	Comparable	Comparator
Defined in	Inside the class	Outside (can be reused/flexible)
Sorting type	Only one natural order	Multiple, customizable orders
Method to override	compareTo(T o)	compare(T o1, T o2)
Example use	Collections.sort(list)	Collections.sort(list, comparator)
Java 8+ style	N/A	(a, b) -> a.age - b.age



Bonus: Sort by multiple parameters
// Sort by age, then by name
studentList.sort(Comparator
    .comparingInt(Student::getAge)
    .thenComparing(Student::getName));
Let me know if you'd like a quick demo or practice exercise using multiple parameters!