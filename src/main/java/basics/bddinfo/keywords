Cucumber Gherkin Keywords
Feature

Purpose: Defines the high-level functionality under test.
Always the first keyword in a .feature file.
Serves as documentation + test grouping.

Feature: LogIn Action Test

Background

Purpose: Common steps executed before every scenario in the feature.

Runs after Hooks, but before each Scenario.

Feature: Add to Cart
  Background: User is Logged In
    Given User searched for Lenovo Laptop
    When Add the first laptop that appears in the search result to the basket
    Then User basket should display with 1 item

Scenario

Purpose: Defines a single test case.

Equivalent to one test method.

Built with Given ‚Üí When ‚Üí Then flow.

Scenario: Successful LogIn with Valid Credentials
  Given User is on Home Page
  When User Navigate to LogIn Page
  Then Message displayed LogIn Successfully

Scenario Outline

Purpose: Defines a parameterized test with examples.

Uses Examples table to run the same scenario with multiple datasets.

Feature: Delivery Application - delivery type selection

  Rule: Only capital cities are eligible for regular delivery
  Scenario Outline: Delivery type depends on city
    Given User is raising a delivery request for automobile spare parts
    When User enters the <city>, a <delivery type> is set as default
    Then User submits delivery request

  Examples:
    | city    | delivery type |
    | Athens  | Regular       |
    | Delhi   | Regular       |
    | Kolkata | Premium       |
    | Houston | Premium       |

Given

Defines the precondition for the test.

Given User is on Home Page

When

Defines the action performed by the user/system.

When User Navigate to LogIn Page

Then

Defines the expected outcome/result.

Then Message displayed LogIn Successfully

And

Adds more conditions or steps to Given, When, or Then.

Given User is on Home Page
And LogIn Link displayed
When User Navigate to LogIn Page
And User enters UserName and Password
Then Message displayed Login Successfully
And LogOut Link displayed

But

Adds negative conditions or exceptions.

Scenario: Unsuccessful Login with Invalid Credentials
  Given User is on Home Page
  When User Navigate to LogIn Page
  And User enters UserName and Password
  But The user credentials are wrong
  Then Message displayed Wrong UserName & Password

* (Wildcard)

Acts as a shorthand for Given / When / Then / And.

Useful for readability or consistency.

Scenario: Successful Login with Valid Credentials
  * User is on Home Page
  * User Navigate to LogIn Page
  * User enters UserName and Password
  * Message displayed Login Successfully

Rule

Organizes scenarios under specific business rules.

Improves readability, ignored at runtime.

Feature: Shopping Cart

  Rule: Logged-in users can add items
    Scenario: Add a single item
      * I am logged in
      * I select a product
      * I add it to the cart
      Then the cart should contain the product

  Rule: Guest users cannot add items
    Scenario: Guest tries to add item
      Given I am not logged in
      When I try to add a product to the cart
      Then I should see a login prompt
      But the cart should remain empty

üîé Summary

Feature ‚Üí defines what is being tested.

Rule ‚Üí organizes scenarios under business logic.

Background ‚Üí runs common pre-steps for all scenarios.

Scenario ‚Üí defines one test case.

Scenario Outline ‚Üí data-driven scenario.

Given ‚Üí precondition.

When ‚Üí action.

Then ‚Üí expected result.

And ‚Üí add more steps.

But ‚Üí negative step.

* ‚Üí flexible shorthand for any step.

üëâ Would you like me to now create a side-by-side mapping of these keywords with the corresponding Java step definitions (like @Given, @When, @Then, etc.) so you can see how they connect in code?

You said:
sure.. then i will copy paste in my notes
ChatGPT said:

Perfect üëç Let‚Äôs make this a clean side-by-side mapping between Gherkin keywords and their Java Step Definitions so you can copy it directly into your notes.

ü•í Gherkin ‚Üí Java Step Definitions Mapping
Feature

No Java code mapping.

Just a container for scenarios.

Feature: LogIn Action Test

Background

No direct mapping.

Steps inside Background map like normal (@Given, @When, etc.).

Background: User is logged in
  Given User is on Home Page
  And User enters username and password

Scenario

No special mapping.

Each step inside has a Java step definition.

Scenario: Successful LogIn with Valid Credentials
  Given User is on Home Page
  When User Navigate to LogIn Page
  Then Message displayed Login Successfully

Scenario Outline + Examples

Placeholders (<value>) map to Java method parameters.

Scenario Outline: Delivery type depends on city
  Given User enters <city>
  Then Delivery type should be <deliveryType>

Examples:
  | city    | deliveryType |
  | Delhi   | Regular      |
  | Kolkata | Premium      |


Java Step Definition:

@Given("User enters {string}")
public void user_enters_city(String city) {
    System.out.println("City: " + city);
}

@Then("Delivery type should be {string}")
public void delivery_type_should_be(String deliveryType) {
    System.out.println("Delivery Type: " + deliveryType);
}

Given

Maps to @Given in Java.

Precondition setup.

Given User is on Home Page

@Given("User is on Home Page")
public void user_is_on_home_page() {
    System.out.println("Navigated to Home Page");
}

When

Maps to @When.

Represents the action/event.

When User Navigate to LogIn Page

@When("User Navigate to LogIn Page")
public void user_navigate_to_login_page() {
    System.out.println("Navigated to Login Page");
}

Then

Maps to @Then.

Represents the verification/assertion.

Then Message displayed LogIn Successfully

@Then("Message displayed LogIn Successfully")
public void message_displayed_login_successfully() {
    System.out.println("Login Successful Message Verified");
}

And

Maps to the same annotation type as the preceding step.

Example:

If after Given, then it maps to another @Given.

If after When, then it maps to another @When.

Given User is on Home Page
And LogIn Link displayed

@Given("LogIn Link displayed")
public void login_link_displayed() {
    System.out.println("Login link is visible");
}

But

Behaves like And.

Commonly used for negative conditions.

But The user credentials are wrong

@Given("The user credentials are wrong")
public void the_user_credentials_are_wrong() {
    System.out.println("Negative condition: wrong credentials");
}

* (Wildcard)

Treated as the correct annotation type automatically.

For step definitions, still written as @Given, @When, or @Then.

* User is on Home Page
* User enters username and password
* Message displayed LogIn Successfully

@Given("User is on Home Page")
public void user_is_on_home_page() { ... }

@When("User enters username and password")
public void user_enters_username_and_password() { ... }

@Then("Message displayed LogIn Successfully")
public void message_displayed_login_successfully() { ... }

üîé Quick Reference Table
Gherkin Keyword	Java Mapping	Purpose
Feature	None	Groups scenarios (documentation)
Background	Normal steps	Pre-steps before every scenario
Scenario	None	One test case
Scenario Outline	Step defs with params	Data-driven scenarios
Given	@Given	Precondition
When	@When	Action
Then	@Then	Verification
And	Same as previous	Adds more steps
But	Same as previous	Negative/exception condition
*	Same as actual type	Flexible shorthand
Rule	None	Organizes scenarios, improves readability